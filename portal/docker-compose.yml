name: portal

services:
  redis:
    image: redis:7.2-alpine
    command: >
      redis-server
      --appendonly yes
      --save 60 1000
      --requirepass "$$(cat /run/host_secrets/redis_password)"
    volumes:
      - redis_data:/data
      - /srv/secrets/portal/redis_password:/run/host_secrets/redis_password:ro
    networks:
      - portal
    restart: unless-stopped

  portal-app:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      - TZ=${TZ}
      # the app reads secrets from these files at runtime
      - SECRET_KEY_FILE=/run/host_secrets/secret_key
      - REDIS_PASSWORD_FILE=/run/host_secrets/redis_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # optional webhook target if/when you want to trigger n8n from the portal
      - N8N_WEBHOOK_URL=
    volumes:
      - /srv/secrets/portal/secret_key:/run/host_secrets/secret_key:ro
      - /srv/secrets/portal/redis_password:/run/host_secrets/redis_password:ro
    depends_on:
      - redis
    networks:
      - portal
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=${TRAEFIK_NETWORK}
      - traefik.http.routers.portal.rule=Host("${DOMAIN_PORTAL}")
      - traefik.http.routers.portal.entrypoints=websecure
      - traefik.http.routers.portal.tls.certresolver=le
      - traefik.http.routers.portal.service=8000
      - traefik.http.services.8000.loadbalancer.server.port=8000
      - traefik.http.routers.portal.rule=Host("${DOMAIN_PORTAL}") && PathPrefix("/")
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 10
    restart: unless-stopped

volumes:
  redis_data:

networks:
  proxy:
    external: true
    name: ${TRAEFIK_NETWORK}
  portal:
    external: true
    name: ${PORTAL_NETWORK}





